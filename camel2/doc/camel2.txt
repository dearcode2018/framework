

Message
org.apache.camel.Message是camel中一个基本的包含数据和路由的实体，Message包含了:

1) 唯一的标识符 (unique identifier java.lang.String)

2) 头信息(headers): 会提供一些内容的提示，头信息被组织成名值对的形式，String:Object

3) 内容(body): 是一个Object类型的对象，这意味着要确保接收器能够理解消息的内容，当消息发送器和接收器使用不同的
内容格式的时候，可以使用camel的数据转换机制将其转换为一个特定的格式。在许多情况下，预定义类型可以被自动转换.

4) 错误标识(fault flag): 使用来标记正常或错误的标记，通常由一些标准的类定义，例如 WSDL(Web Service Description Language)

Exchange
org.apache.camel.Exchange 是一个消息之间通信的抽象会话.
1) Exchange Id
2) MEP: 一个类似InOnly或InOut的消息交换模式，当模式是InOnly时，消息交换中只包含IN_MESSAGE
3) Exception: 在路由过程中的任何异常
4) Properties: 类似Message的headers，但它们将持续到整个Exchange结束，camel还可能利用它们进行一些
特殊的通信.
5) IN-MESSAGE
6) OUT-MESSAGE

Camel Context
在项目中一些相互链接的构件，是由camle context 将它们链接在一起，它将实体连接在一起，有时被称为camel运行时容器.

Endpoint
是camle中的一个基本概念，Endpoint作为camel系统中一个普通的端点，可以发送或接收消息。在camel中Endpoint使用URI来
配置，在运行时Camel通过URI来查找端点。端点功能强大、全面又可以维护.

Component
component是一些Endpoints URI的集合，它们通过连接码来链接(例如 file: , jms: ...)，而且作为一个endpoint的工厂。现在
camel中有超过80个component，可以通过扩展org.apache.camel.impl.DefaultComponent来自定义component.

Route
路由，定义了Message如何在一个系统中传输的真实路径或通道。路由引擎本身并不暴露给开发者，但开发者可以自己定义路由，
并且需要信任引擎可以完成复杂的传输工作。每个路由都有一个唯一的标识符，用来记录日志、调试、监控，以及启动或停止路由.
路由也有一个输入的message，因此它们也有效地链接到一个输入端点。路由定义了一种领域特有的语言(DSL Domain Special Lanuage)
，camel提供了java/scala和基于xml的route-dsl.
路由示例: from("file:data/inbox").to("jms:queue:order");
路由可以使用过滤器、多播、接收列表、并行处理来定义，从而变得非常灵活。

Processor
org.apache.camel.Processor 是一个消息接受者和消息通信的处理器。Processor是Route的一个元素，可以用来消息格式转换或其他的
一些变换.









